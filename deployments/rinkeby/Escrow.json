{
  "address": "0x123B24a6542813c105123811B4ec0BBc7FEaF862",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyBuyer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySeller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Priced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Refunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Settled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum Escrow.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3ef98b169d8c576bbd9f01c64b78a5f299c1d0f34fb709af4fe1783bd42a3c2",
  "receipt": {
    "to": null,
    "from": "0xA87f35399A63B9F9562c5e3fe2B1b4c33a4c869D",
    "contractAddress": "0x123B24a6542813c105123811B4ec0BBc7FEaF862",
    "transactionIndex": 23,
    "gasUsed": "818602",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7cddf095b084b3222c1bbc1dce71e5436af0f895954453a4b26387b22610ddee",
    "transactionHash": "0xb3ef98b169d8c576bbd9f01c64b78a5f299c1d0f34fb709af4fe1783bd42a3c2",
    "logs": [],
    "blockNumber": 9900651,
    "cumulativeGasUsed": "4397216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ebe99011590a4d20b71a41df2c0ef889",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBuyer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySeller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Priced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Escrow.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidCollateral()\":[{\"notice\":\"The transferred escrow value does not match the price\"}],\"InvalidState()\":[{\"notice\":\"The function cannot be called at the current state.\"}],\"OnlyBuyer()\":[{\"notice\":\"Custom errors were added in Solidity v0.8.4 Only the buyer can call this function.\"}],\"OnlySeller()\":[{\"notice\":\"Only the seller can call this function.\"}]},\"kind\":\"user\",\"methods\":{\"confirmReceived()\":{\"notice\":\"Step 4a: The buyer confirms that he/she has received the product. In this case he/she receives the collateral back that has been paid on top of the price. Contract goes into State.Settled\"},\"constructor\":{\"notice\":\"Step 1: The seller constructs the Escrow contract Contract starts in State.Inactive.\"},\"pay()\":{\"notice\":\"Step 3b: A buyer pays the priced product and secures the transaction by sending price * collateralFactor to the contract. Contract stores the buyer and goes into State.Paid.\"},\"payout()\":{\"notice\":\"Step 3a and 5: After the buyer has confirmed reception of the product the seller can take out the remaining funds in the escrow which is his compound (2*price) + the payment of the buyer (1*price) Contract goes into State.Inactive\"},\"refund()\":{\"notice\":\"Step 4b: If the product is not received by the buyer the seller can refund him. The buyer receives the 2*price he has paid to the escrow contract back. Contract goes back into State.Priced\"},\"setPrice(uint256)\":{\"notice\":\"Step 2: The seller sets the product price and sends twice the product's price as escrow. Contract goes into in State.Priced.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.4 <0.9.0;\\n\\ncontract Escrow {\\n    uint256 public price; // price of the product to be sold\\n    address payable public seller;\\n    address payable public buyer;\\n\\n    // price * collateralFactor must be provided as collateral\\n    uint constant public collateralFactor = 2;\\n\\n    enum State {\\n        Inactive,\\n        Priced,\\n        Paid,\\n        Settled\\n    } // 0, 1, 2, 3\\n    // The state variable has a default value of the first member, `State.Created`\\n    State public state;\\n\\n    /// Custom errors were added in Solidity v0.8.4\\n    /// Only the buyer can call this function.\\n    error OnlyBuyer();\\n    /// Only the seller can call this function.\\n    error OnlySeller();\\n    /// The function cannot be called at the current state.\\n    error InvalidState();\\n    /// The transferred escrow value does not match the price\\n    error InvalidCollateral();\\n\\n    modifier onlyBuyer() {\\n        if (msg.sender != buyer) revert OnlyBuyer();\\n        _;\\n    }\\n\\n    modifier onlySeller() {\\n        if (msg.sender != seller) revert OnlySeller();\\n        _;\\n    }\\n\\n    modifier inState(State _state) {\\n        if (state != _state) revert InvalidState();\\n        _;\\n    }\\n\\n    modifier secured(uint256 _price) {\\n        if (_price * collateralFactor != msg.value) revert InvalidCollateral();\\n        _;\\n    }\\n\\n    event Priced();\\n    event Paid();\\n    event Settled();\\n    event Refunded();\\n    event Payout();\\n\\n    /// Step 1:\\n    /// The seller constructs the Escrow contract\\n    /// Contract starts in State.Inactive.\\n    constructor() {\\n        seller = payable(msg.sender);\\n    }\\n\\n    /// Step 2:\\n    /// The seller sets the product price and sends twice the product's price as escrow.\\n    /// Contract goes into in State.Priced.\\n    function setPrice(uint256 _price) public payable onlySeller inState(State.Inactive) secured(_price) {\\n        emit Priced();\\n        price = _price;\\n        state = State.Priced;\\n    }\\n\\n    /// Step 3a:\\n    /// The seller aborts the purchase and reclaims his ether by calling payout (see below).\\n\\n    /// Step 3b:\\n    /// A buyer pays the priced product and secures the transaction\\n    /// by sending price * collateralFactor to the contract.\\n    /// Contract stores the buyer and goes into State.Paid.\\n    function pay() public payable inState(State.Priced) secured(price) {\\n        emit Paid();\\n        buyer = payable(msg.sender);\\n        state = State.Paid;\\n    }\\n\\n    /// Step 4a:\\n    /// The buyer confirms that he/she has received the product.\\n    /// In this case he/she receives the collateral back that has been paid on top of the price.\\n    /// Contract goes into State.Settled\\n    function confirmReceived() public onlyBuyer inState(State.Paid) {\\n        emit Settled();\\n        state = State.Settled;\\n        buyer.transfer(price * (collateralFactor - 1));\\n    }\\n\\n    /// Step 4b:\\n    /// If the product is not received by the buyer the seller can refund him.\\n    /// The buyer receives the 2*price he has paid to the escrow contract back.\\n    /// Contract goes back into State.Priced\\n    function refund() public onlySeller inState(State.Paid) {\\n        emit Refunded();\\n        state = State.Priced;\\n        address payable _recipient = buyer;\\n        buyer = payable(0);\\n        // the transfer function reverts the state in case of errors\\n        _recipient.transfer(price * collateralFactor);\\n    }\\n\\n    /// Step 3a and 5:\\n    /// After the buyer has confirmed reception of the product the seller can\\n    /// take out the remaining funds in the escrow which is his\\n    /// compound (2*price) + the payment of the buyer (1*price)\\n    /// Contract goes into State.Inactive\\n    function payout() public onlySeller {\\n        if (state != State.Priced && state != State.Settled) {\\n            revert InvalidState();\\n        }\\n        emit Payout();\\n        price = 0;\\n        state = State.Inactive;\\n        seller.transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x3cad7a9417ddcc94c4443775c8a16b3f76fff5769c4a3fd97625e55f8f94b857\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d82806100616000396000f3fe6080604052600436106100915760003560e01c806373fac6f01161005957806373fac6f01461012457806391b7f5ed1461013b578063a035b1fe14610157578063c19d93fb14610182578063df011c41146101ad57610091565b806308551a53146100965780631b9265b8146100c1578063590e1ae3146100cb57806363bd1d4a146100e25780637150d8ae146100f9575b600080fd5b3480156100a257600080fd5b506100ab6101d8565b6040516100b89190610b50565b60405180910390f35b6100c96101fe565b005b3480156100d757600080fd5b506100e061034f565b005b3480156100ee57600080fd5b506100f761055d565b005b34801561010557600080fd5b5061010e61075b565b60405161011b9190610b50565b60405180910390f35b34801561013057600080fd5b50610139610781565b005b61015560048036038101906101509190610ba6565b610953565b005b34801561016357600080fd5b5061016c610af1565b6040516101799190610be2565b60405180910390f35b34801561018e57600080fd5b50610197610af7565b6040516101a49190610c74565b60405180910390f35b3480156101b957600080fd5b506101c2610b0a565b6040516101cf9190610be2565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180600381111561021357610212610bfd565b5b600260149054906101000a900460ff16600381111561023557610234610bfd565b5b1461026c576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000543460028261027d9190610cbe565b146102b4576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f34ec5380860d4fd12cd95d4d2f001afc87d48bfc50847bec134b0c315c8e2d7760405160405180910390a133600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028060146101000a81548160ff0219169083600381111561034657610345610bfd565b5b02179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d6576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028060038111156103eb576103ea610bfd565b5b600260149054906101000a900460ff16600381111561040d5761040c610bfd565b5b14610444576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf760405160405180910390a16001600260146101000a81548160ff0219169083600381111561049657610495610bfd565b5b02179055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166108fc600260005461052d9190610cbe565b9081150290604051600060405180830381858888f19350505050158015610558573d6000803e3d6000fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156105f8576105f7610bfd565b5b600260149054906101000a900460ff16600381111561061a57610619610bfd565b5b1415801561065b575060038081111561063657610635610bfd565b5b600260149054906101000a900460ff16600381111561065857610657610bfd565b5b14155b15610692576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f354d7e40465161205ea9dee6ebfe67aee9bc460c83cd2397a35e68c5f6ef5e5160405160405180910390a1600080819055506000600260146101000a81548160ff021916908360038111156106eb576106ea610bfd565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610758573d6000803e3d6000fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610808576040517f86efbb5500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280600381111561081d5761081c610bfd565b5b600260149054906101000a900460ff16600381111561083f5761083e610bfd565b5b14610876576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f97088ec3606cfe8cc112180570d03fcde05f9b8e1bfef8e27784eaf5dd5691b660405160405180910390a16003600260146101000a81548160ff021916908360038111156108c8576108c7610bfd565b5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600160026109179190610d18565b6000546109249190610cbe565b9081150290604051600060405180830381858888f1935050505015801561094f573d6000803e3d6000fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109da576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060038111156109ef576109ee610bfd565b5b600260149054906101000a900460ff166003811115610a1157610a10610bfd565b5b14610a48576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8134600282610a579190610cbe565b14610a8e576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7ffae94631bbbb61deb5ba54699a4a28e5dd0b6afbf583d7b8cefbd3da7784b5c560405160405180910390a1826000819055506001600260146101000a81548160ff02191690836003811115610ae757610ae6610bfd565b5b0217905550505050565b60005481565b600260149054906101000a900460ff1681565b600281565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3a82610b0f565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b600080fd5b6000819050919050565b610b8381610b70565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b600060208284031215610bbc57610bbb610b6b565b5b6000610bca84828501610b91565b91505092915050565b610bdc81610b70565b82525050565b6000602082019050610bf76000830184610bd3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610c3d57610c3c610bfd565b5b50565b6000819050610c4e82610c2c565b919050565b6000610c5e82610c40565b9050919050565b610c6e81610c53565b82525050565b6000602082019050610c896000830184610c65565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc982610b70565b9150610cd483610b70565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d0d57610d0c610c8f565b5b828202905092915050565b6000610d2382610b70565b9150610d2e83610b70565b925082821015610d4157610d40610c8f565b5b82820390509291505056fea2646970667358221220fec61de7a2eaa6fc89d145be9d4f0a17287fcf4300a8d593747ebeaa5678f2d264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c806373fac6f01161005957806373fac6f01461012457806391b7f5ed1461013b578063a035b1fe14610157578063c19d93fb14610182578063df011c41146101ad57610091565b806308551a53146100965780631b9265b8146100c1578063590e1ae3146100cb57806363bd1d4a146100e25780637150d8ae146100f9575b600080fd5b3480156100a257600080fd5b506100ab6101d8565b6040516100b89190610b50565b60405180910390f35b6100c96101fe565b005b3480156100d757600080fd5b506100e061034f565b005b3480156100ee57600080fd5b506100f761055d565b005b34801561010557600080fd5b5061010e61075b565b60405161011b9190610b50565b60405180910390f35b34801561013057600080fd5b50610139610781565b005b61015560048036038101906101509190610ba6565b610953565b005b34801561016357600080fd5b5061016c610af1565b6040516101799190610be2565b60405180910390f35b34801561018e57600080fd5b50610197610af7565b6040516101a49190610c74565b60405180910390f35b3480156101b957600080fd5b506101c2610b0a565b6040516101cf9190610be2565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180600381111561021357610212610bfd565b5b600260149054906101000a900460ff16600381111561023557610234610bfd565b5b1461026c576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000543460028261027d9190610cbe565b146102b4576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f34ec5380860d4fd12cd95d4d2f001afc87d48bfc50847bec134b0c315c8e2d7760405160405180910390a133600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028060146101000a81548160ff0219169083600381111561034657610345610bfd565b5b02179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d6576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028060038111156103eb576103ea610bfd565b5b600260149054906101000a900460ff16600381111561040d5761040c610bfd565b5b14610444576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8616bbbbad963e4e65b1366f1d75dfb63f9e9704bbbf91fb01bec70849906cf760405160405180910390a16001600260146101000a81548160ff0219169083600381111561049657610495610bfd565b5b02179055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166108fc600260005461052d9190610cbe565b9081150290604051600060405180830381858888f19350505050158015610558573d6000803e3d6000fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e4576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156105f8576105f7610bfd565b5b600260149054906101000a900460ff16600381111561061a57610619610bfd565b5b1415801561065b575060038081111561063657610635610bfd565b5b600260149054906101000a900460ff16600381111561065857610657610bfd565b5b14155b15610692576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f354d7e40465161205ea9dee6ebfe67aee9bc460c83cd2397a35e68c5f6ef5e5160405160405180910390a1600080819055506000600260146101000a81548160ff021916908360038111156106eb576106ea610bfd565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610758573d6000803e3d6000fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610808576040517f86efbb5500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280600381111561081d5761081c610bfd565b5b600260149054906101000a900460ff16600381111561083f5761083e610bfd565b5b14610876576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f97088ec3606cfe8cc112180570d03fcde05f9b8e1bfef8e27784eaf5dd5691b660405160405180910390a16003600260146101000a81548160ff021916908360038111156108c8576108c7610bfd565b5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600160026109179190610d18565b6000546109249190610cbe565b9081150290604051600060405180830381858888f1935050505015801561094f573d6000803e3d6000fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109da576040517f85d1f72600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060038111156109ef576109ee610bfd565b5b600260149054906101000a900460ff166003811115610a1157610a10610bfd565b5b14610a48576040517fbaf3f0f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8134600282610a579190610cbe565b14610a8e576040517fd1ef4cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7ffae94631bbbb61deb5ba54699a4a28e5dd0b6afbf583d7b8cefbd3da7784b5c560405160405180910390a1826000819055506001600260146101000a81548160ff02191690836003811115610ae757610ae6610bfd565b5b0217905550505050565b60005481565b600260149054906101000a900460ff1681565b600281565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3a82610b0f565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b600080fd5b6000819050919050565b610b8381610b70565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b600060208284031215610bbc57610bbb610b6b565b5b6000610bca84828501610b91565b91505092915050565b610bdc81610b70565b82525050565b6000602082019050610bf76000830184610bd3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610c3d57610c3c610bfd565b5b50565b6000819050610c4e82610c2c565b919050565b6000610c5e82610c40565b9050919050565b610c6e81610c53565b82525050565b6000602082019050610c896000830184610c65565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc982610b70565b9150610cd483610b70565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d0d57610d0c610c8f565b5b828202905092915050565b6000610d2382610b70565b9150610d2e83610b70565b925082821015610d4157610d40610c8f565b5b82820390509291505056fea2646970667358221220fec61de7a2eaa6fc89d145be9d4f0a17287fcf4300a8d593747ebeaa5678f2d264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidCollateral()": [
        {
          "notice": "The transferred escrow value does not match the price"
        }
      ],
      "InvalidState()": [
        {
          "notice": "The function cannot be called at the current state."
        }
      ],
      "OnlyBuyer()": [
        {
          "notice": "Custom errors were added in Solidity v0.8.4 Only the buyer can call this function."
        }
      ],
      "OnlySeller()": [
        {
          "notice": "Only the seller can call this function."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "confirmReceived()": {
        "notice": "Step 4a: The buyer confirms that he/she has received the product. In this case he/she receives the collateral back that has been paid on top of the price. Contract goes into State.Settled"
      },
      "constructor": {
        "notice": "Step 1: The seller constructs the Escrow contract Contract starts in State.Inactive."
      },
      "pay()": {
        "notice": "Step 3b: A buyer pays the priced product and secures the transaction by sending price * collateralFactor to the contract. Contract stores the buyer and goes into State.Paid."
      },
      "payout()": {
        "notice": "Step 3a and 5: After the buyer has confirmed reception of the product the seller can take out the remaining funds in the escrow which is his compound (2*price) + the payment of the buyer (1*price) Contract goes into State.Inactive"
      },
      "refund()": {
        "notice": "Step 4b: If the product is not received by the buyer the seller can refund him. The buyer receives the 2*price he has paid to the escrow contract back. Contract goes back into State.Priced"
      },
      "setPrice(uint256)": {
        "notice": "Step 2: The seller sets the product price and sends twice the product's price as escrow. Contract goes into in State.Priced."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "price",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "seller",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 7,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "buyer",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 18,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "state",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(State)15"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_enum(State)15": {
        "encoding": "inplace",
        "label": "enum Escrow.State",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}